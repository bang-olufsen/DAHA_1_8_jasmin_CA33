/*
** ADSP-21593 core 2 linker description file generated on Oct 19, 2020 at 13:22:00.
*/
/*
** Copyright (C) 2000-2020 Analog Devices Inc., All Rights Reserved.
**
** This file is generated automatically based upon the options selected
** in the System Configuration utility. Changes to the LDF configuration
** should be made by modifying the appropriate options rather than editing
** this file. To access the System Configuration utility, double-click the
** system.svc file from a navigation view.
**
** Custom additions can be inserted within the user-modifiable sections. These
** sections are bounded by comments that start with "$VDSG". Only changes
** placed within these sections are preserved when this file is re-generated.
**
** Product      : CrossCore Embedded Studio
** Tool Version : 6.2.2.5
*/
#include "../src/System/Include/Commn.h"
ARCHITECTURE(ADSP-21593)

/*
** Define a linked library list. Libraries from the command line are included
** in COMMAND_LINE_OBJECTS.
*/
$LIBRARIES = 

/*$VDSG<insert-user-libraries-at-beginning>                     */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-at-beginning>                     */

    libcc.dlb
   ,libc.dlb
   ,libio.dlb
   ,libcpp.dlb
   ,libosal_noos.dlb
   ,libprofile.dlb
   ,libssl.dlb
   ,libdrv.dlb
   ,libdsp.dlb
   ,libldr.dlb

/*$VDSG<insert-user-libraries-at-end>                           */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-at-end>                           */

   ;

/*
** Define a linked objects list.
*/
$OBJECTS = 

/*$VDSG<insert-user-objects-at-beginning>                       */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-objects-at-beginning>                       */

    "app_startup.doj"
   ,$COMMAND_LINE_OBJECTS

/*$VDSG<insert-user-objects-at-end>                             */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-objects-at-end>                             */

   ;

/*
** List of all objects and libraries.
*/
$OBJS_LIBS = $OBJECTS, $LIBRARIES;

/*
** List of objects and libraries which prefer internal memory as
** specified by prefersMem attribute.
*/
$OBJS_LIBS_INTERNAL = 

/*$VDSG<insert-libraries-internal>                              */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-internal>                              */

    $OBJS_LIBS{prefersMem("internal")}

/*$VDSG<insert-libraries-internal-end>                          */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-internal-end>                          */

   ;

/*
** List of objects and libraries which don't have a preference for
** external memory as specified by prefersMem attribute.
*/
$OBJS_LIBS_NOT_EXTERNAL = 

/*$VDSG<insert-libraries-not-external>                          */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-not-external>                          */

    $OBJS_LIBS{!prefersMem("external")}

/*$VDSG<insert-libraries-not-external-end>                      */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-not-external-end>                      */

   ;

/*$VDSG<insert-user-macros>                                     */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-macros>                                     */


MEMORY
{
   // ADSP-21593 MEMORY MAP.
   // The ADSP-SC59x and ADSP-2159x SHARC+ cores have 5 Mbit L1 RAM split over
   // four blocks.

   // This LDF defines memory sections only in byte format. It is no longer
   // necessary to partition memory for different widths and different
   // input types.

   // The output sections that populate the memory are defined to use
   // one of the following qualifiers:

   //    BW     - byte sections
   //    PM     - PM data/ISA code
   //    DM     - DM data
   //    SW     - VISA code
   //    DATA64 - long word data

   // The linker filters the inputs for each output section to match
   // these output section qualfiers. Each output section uses the same
   // byte memory sections which the linker packs correctly for each
   // qualifier.
   // Notes:
   // 1) The interrupt Vector Table (IVT) code is placed in internal memory
   //    by default and has to use ISA (NW, 48 bit) instructions.


   // ----------------------- L1-Block 0 RAM (1.5 MBit) ------------------------
   mem_iv_code             { TYPE(PM RAM) START(0x00090000) END(0x000900a7) WIDTH(48) }
   mem_block0_kernal_code  { TYPE(BW RAM) START(0x002403f0) END(0x0025afff) WIDTH(8) } 
   mem_block0_Kernal_data  { TYPE(BW RAM) START(0x0025b000) END(0x00269fff) WIDTH(8) } 
   mem_block0_bw           { TYPE(BW RAM) START(0x0026A000) END(0x0026D7FF) WIDTH(8) }
   mem_block0_heap_bw      { TYPE(BW RAM) START(0x0026D800) END(0x0026EBFF) WIDTH(8) }
   mem_block0_stack_bw     { TYPE(BW RAM) START(0x0026EC00) END(0x0026ffff) WIDTH(8) }

   // ----------------------- L1-Block 1 RAM (1.5 MBit) ------------------------
   // The data cache attached to block 1 caches all the external memory access
   // requests for the DM bus. The size of the cache can be adjusted with a
   // corresponding reduction of the available non-cache L1 space.
   // 128 KB at the end of block 1 is DM cache
   mem_block1_bw           { TYPE(BW RAM) START(0x002c0000) END(0x002cffff) WIDTH(8) }

   // ----------------------- L1-Block 2 RAM (1 MBit) --------------------------
   // The data cache attached to block 2 caches all the external memory access
   // requests for the PM bus. If the size of the cache is 128KB, the whole
   // of block 2 is cache.
   //32 KB at the end of block 2 is PM cache
   mem_block2_bw           { TYPE(BW RAM) START(0x00300000) END(0x00317FFF) WIDTH(8) }

   // ----------------------- L1-Block 3 RAM (1 MBit) --------------------------
   // The instruction cache is attached to block 3.
   // 64 KB at the end of block 3 is instruction cache
   mem_block3_bw           { TYPE(BW RAM) START(0x00380000) END(0x0038ffff) WIDTH(8) }

   // ----------------------- L2-RAM (16 MBit) ----------------------------------
   // The 2 MB L2 memory has 8 banks partitioned as follows:
   //  bank1  2000_0000  2003_FFFF   4KB uncached - ICC          (mem_L2B1P1_bw)
   //                               60KB uncached - MCAPI SHARC1 (mem_L2B1P2_bw)
   //                               64KB uncached - MCAPI SHARC0 (mem_L2B1P3_bw)
   //                              128KB cached   - SHARC0     (mem_L2B1toB5_bw)
   //  bank2  2004_0000  2007_FFFF 256KB cached   - SHARC0     (mem_L2B1toB5_bw)
   //  bank3  2008_0000  200B_FFFF 256KB cached   - SHARC0     (mem_L2B1toB5_bw)
   //  bank4  200C_0000  200F_FFFF 256KB cached   - SHARC0     (mem_L2B1toB5_bw)
   //  bank5  2010_0000  2013_FFFF 256KB cached   - SHARC0     (mem_L2B1toB5_bw)
   //  bank6  2014_0000  2017_FFFF 256KB cached   - SHARC1     (mem_L2B6toB8_bw)
   //  bank7  2018_0000  201B_FFFF 256KB cached   - SHARC1     (mem_L2B6toB8_bw)
   //  bank8  201C_0000  201F_DFFF 248KB cached   - SHARC1     (mem_L2B6toB8_bw)
   //         201F_E000  201F_FFFF   8KB cached boot code working area
   //
   // Notes:
   // 1. The boot code claims the last 8KB of L2 SRAM, as working space.
   //    This memory is not bootable, but can be used by the application once
   //    booting is complete (NO_INIT in CCES). Note that if the application
   //    makes use of this space and then calls the Boot Code APIs, the
   //    space may be corrupted.
   mem_L2B1P1_bw           { TYPE(BW RAM) START(0x20000000) END(0x20000fff) WIDTH(8) }
   mem_L2B1P2_bw           { TYPE(BW RAM) START(0x20001000) END(0x2000ffff) WIDTH(8) }
   mem_L2B1P3_bw           { TYPE(BW RAM) START(0x20010000) END(0x2001ffff) WIDTH(8) }
   mem_pack_dma_list_bw    { TYPE(BW RAM) START(0x20020000) END(0x2005ffff) WIDTH(8) } //Reserved for CORE1
   mem_L2B1toB5_bw         { TYPE(BW RAM) START(0x20060000) END(0x2011ffff) WIDTH(8) } //Reserved for CORE1
   mem_L2B6toB8_bw         { TYPE(BW RAM) START(0x20120000) END(0x20145fff) WIDTH(8) }  
   Shared_Memory       	   { TYPE(BW RAM) START(0x20146000) END(0x2014DFFF) WIDTH(8) } 
   mem_Customer_bw         { TYPE(BW RAM) START(0x2014E000) END(0x201fdfff) WIDTH(8) }  //customer 5.5Mbits
   mem_L2BC_bw             { TYPE(BW RAM) START(0x201fe000) END(0x201fffff) WIDTH(8) }

  #define MY_L2_UNCACHED_MEM mem_L2B1P2_bw
  #define MY_L2_CACHED_MEM   mem_L2B6toB8_bw
   // ----------------------- L3 ------------------------------------------------
   // DMC0 DDR SDRAM memory is partitioned between the cores.
   //
   // Notes
   //  1. Code execution addresses are restricted for the SHARC cores so the
   //     memory allocated cannot be increased or moved.
   //  2. All L3 will be considered cached.
   //  3. When there are two data segments MY_SDRAM_DATA1_MEM is defined to be
   //     the smaller and MY_SDRAM_DATA2_MEM to be the larger one.

   // ----------------------- 128MB DMC0(DDR-A) ---------------------------------
   // 128MB DMC0 DDR SDRAM memory is partitioned as follows:
   //   DDR-A part1 : SHARC0 NW code, 3MB
   //   DDR-A part2 : SHARC1 NW code, 3MB
   //   DDR-A part3 : SHARC0 data, 4MB
   //   DDR-A part4 : SHARC0 VISA code, 3MB
   //   DDR-A part5 : SHARC1 VISA code, 3MB
   //   DDR-A part6 : SHARC0 data, 48MB
   //   DDR-A part7 : SHARC1 data, 64MB
  
     /*$VDSG<insert-new-memory-segments>                          */
   /* Text inserted between these $VDSG comments will be preserved */
   /*$VDSG<insert-new-memory-segments>                          */

   RESERVED_SDRAM_MEM_A1   						{ TYPE(BW RAM) START(0x80000000) END(0x802fffff) WIDTH(8) } //Reserved for Core1
   RESERVED_SDRAM_MEM_A2						{ TYPE(BW RAM) START(0x80300000) END(0x805ff9ff) WIDTH(8) } //Reserved for Core1
   MEM_CODE_NW_SDRAM_MEM_A2      				{ TYPE(BW RAM) START(0x805ffa00) END(0x805fffff) WIDTH(8) }  
   
   MEM_DMC0_PREDAC_BW_A3      		  			{ TYPE(BW RAM) START(0x80600000) END(0x8097ffff) WIDTH(8) }  //Reserved for Core1
   Reserved_SDRAM_MEM_A3		       			{ TYPE(BW RAM) START(0x80980000) END(0x809fffff) WIDTH(8) }   //Reserved for Core1
    
   RESERVED_SDRAM_MEM_4					        { TYPE(BW RAM) START(0x80a00000) END(0x80CFFFFF) WIDTH(8) }	 //Reserved for Core1
   
   KERNEL_CODE_SDRAM_A5							{ TYPE(BW RAM) START(0x80D00000) END(0x80D7EAFE) WIDTH(8) } 
   ADIVIRTUALX_CODE_SDRAM_MEM                   { TYPE(BW RAM) START(0x80D7EAFF) END(0x80D7FFFF) WIDTH(8) }
   LIBC_CODE_SDRAM_A5  	  						{ TYPE(BW RAM) START(0x80D80000) END(0x80DBFFFF) WIDTH(8) } 
   CUSTPP_CODE_SDRAM_A5			    		    { TYPE(BW RAM) START(0x80DC0000) END(0x80EBFFFF) WIDTH(8) } //1.0MB		
   RESERVED_SDRAM_MEM_A5   	 					{ TYPE(BW RAM) START(0x80EC0000) END(0x80FFEFFF) WIDTH(8) }  //Reserved for Core1
   RESERVED_SDRAM_MEM_A5_SSL   					{ TYPE(BW RAM) START(0x80FFF000) END(0x80FFFFFF) WIDTH(8) } //4kB Memory
    
   RESERVED_SDRAM_MEM_A6   						{ TYPE(BW RAM) START(0x81000000) END(0x83ffffff) WIDTH(8) }   //Reserved for Core1
    
   KERNEL_DATA_SDRAM_A7   						{ TYPE(BW RAM) START(0x84000000) END(0x842FBFFE) WIDTH(8) }
   ADIVIRTUALX_DATA_SDRAM_MEM                   { TYPE(BW RAM) START(0x842FBFFF) END(0x842FFFFF) WIDTH(8) }
   LIBC_DATA_SDRAM_A7		                 	{ TYPE(BW RAM) START(0x84300000) END(0x843FFFFF) WIDTH(8) } 
   CUSTPP_DATA_SDRAM_A7							{ TYPE(BW RAM) START(0x84400000) END(0x85CFFFFF) WIDTH(8) }	//25MB
   MEM_DMC0_SDRAM_MEM_A7      			    	{ TYPE(BW RAM) START(0x85D00000) END(0x87FFFFFF) WIDTH(8) }  //Reserved for Core1
 
  #define MY_SDRAM_KERNEL_CODE_MEM  		    KERNEL_CODE_SDRAM_A5
  #define MY_SDRAM_KERNEL_DATA_MEM       	    KERNEL_DATA_SDRAM_A7   
  #define MY_SDRAM_COMMON_LIB_C_CODE_MEM	    LIBC_CODE_SDRAM_A5
  #define MY_SDRAM_COMMON_LIB_C_DATA_MEM 	    LIBC_DATA_SDRAM_A7
  #define MY_SDRAM_CUSTPP_CODE_MEM		    CUSTPP_CODE_SDRAM_A5
  #define MY_SDRAM_CUSTPP_DATA_MEM		    CUSTPP_DATA_SDRAM_A7 

 
} /* MEMORY */


PROCESSOR 21593_CORE_2
{
   LINK_AGAINST( $COMMAND_LINE_LINK_AGAINST )
   OUTPUT($COMMAND_LINE_OUTPUT_FILE)
   KEEP(___ctor_NULL_marker)
   KEEP(__ctor_NULL_marker.)
   ENTRY(start)
   
   /*$VDSG<insert-user-ldf-commands>                            */
   /* Text inserted between these $VDSG comments will be preserved */
   /*$VDSG<insert-user-ldf-commands>                            */
   
   SECTIONS
   {
      
      /*$VDSG<insert-new-sections-at-iv_code>                   */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-iv_code>                   */
      

    // ------------------------------------------------------------------
    // Block 0 is primarily used for the interrupt vectors code, stack,
    // heap and DM data.
    // If the entire block3 is cache (128KB size) it also includes
    // priority code section.
      
      /*$VDSG<insert-new-sections-for-l1_block0>                */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-for-l1_block0>                */
      
      #define DATA_INIT_QUAL // None, as runtime initialization is disabled.
      #define IV_CODE dxe_iv_code
      IV_CODE PM
      {
         
         /*$VDSG<insert-new-sections-at-the-start-of-iv_code>   */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-new-sections-at-the-start-of-iv_code>   */
         
         // Interrupt vector code (4 NW instructions per interrupt)
         INPUT_SECTIONS( $OBJECTS(iv_code) )
         
         /*$VDSG<insert-new-sections-at-the-end-of-iv_code>     */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-new-sections-at-the-end-of-iv_code>     */
         
      } > mem_iv_code
      
      
      /*$VDSG<insert-new-sections-at-mem_block0_bw>             */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-mem_block0_bw>             */
      
      // Stack and heap initial memory reserve.
      dxe_block0_heap_reserve NO_INIT BW
      {
         RESERVE(system_heap, system_heap_length = 5120, 8)
      } > mem_block0_heap_bw 
      
      dxe_block0_stack_reserve NO_INIT BW
      {
         RESERVE(system_stack, system_stack_length = 5120, 8)
      } > mem_block0_stack_bw 
    
      // Next map data that's not thought to be low priority.

      Kernal_code_sw SW
      {
         //  Unspecified and lowest priority no init data for any unused memory.
         INPUT_SECTION_ALIGN(2)
         INPUT_SECTIONS( $OBJS_LIBS (seg_kernal_code) )
	  	 INPUT_SECTIONS( $OBJS_LIBS	(seg_int_code)  )
	  	 INPUT_SECTIONS( $OBJS_LIBS (Seg_Decoder_Core2 ) )
	  	 INPUT_SECTIONS( $OBJS_LIBS (Seg_Init_Struct_Core2) )
	  	 INPUT_SECTIONS( $OBJS_LIBS (Seg_Main_Core2) )
	  	 INPUT_SECTIONS( app_startup.doj (seg_pmco))
	  	 INPUT_SECTIONS( system/adi_initialize.doj(seg_swco) ) 
      } > mem_block0_kernal_code

      Kernal_data_bw BW
      {
         //  Unspecified and lowest priority no init data for any unused memory.
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( $OBJS_LIBS( seg_kernal_data_align32) )
         INPUT_SECTIONS( $OBJS_LIBS( seg_int_data) )  
         INPUT_SECTIONS( /system/startup_ldf/app_heaptab.doj(seg_dmda) )      
      } > mem_block0_Kernal_data
    // ------------------------------------------------------------------
    // Block 1 is primarily used for the DM data and DM cache.

    // Define a DM cache size symbol.
    // The values used match the bits in the L1C0_CFG register size bits or
    // -1 if cache is off.

      ___ldf_dmcachesize = 3; // 128 KB DM cache
      
      /*$VDSG<insert-new-sections-for-l1_block1>                */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-for-l1_block1>                */      
      
    // ------------------------------------------------------------------
    // Block 2 is primarily used for the PM data and PM cache.

    // Define a PM cache size symbol.
    // The values used match the bits in the L1C0_CFG register size bits or
    // -1 if cache is off.

      
      /*$VDSG<insert-new-sections-for-l1_block2>                */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-for-l1_block2>                */
      
      ___ldf_pmcachesize = 1; // 32 KB PM cache
      
      dxe_block2_data_prio0_bw1 BW
      {
         // Highest priority byte data for block2.
         INPUT_SECTION_ALIGN(4)
	      INPUT_SECTIONS( $OBJS_LIBS(Seg_Kernal_Data) )
      } > mem_block2_bw
    // ------------------------------------------------------------------
    // Block 3 is primarily used for code and instruction cache.

    // Define an instruction cache size symbol.
    // The values used match the bits in the L1C0_CFG register size bits or
    // -1 if cache is off.

      ___ldf_icachesize = 2; // 64 KB instruction cache
      
      /*$VDSG<insert-new-sections-for-l1_block3>                */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-for-l1_block3>                */      

    // ------------------------------------------------------------------
    // Input any unmapped data or code to fill up any unused L1 memory
    // available in the blocks. However, we can't put code in blocks 1 and
    // 2 when they are used as data caches.

      
      /*$VDSG<insert-new-sections-at-mem_block2_overflow>       */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-mem_block2_overflow>       */
      
    
      dxe_block0_nw_code PM
      {
         // ISA code.
         INPUT_SECTION_ALIGN(2)
         INPUT_SECTIONS( $OBJS_LIBS(seg_int_code) )
         // The __lib_setup_memory routine requires seg_init to be placed in L1.
         INPUT_SECTIONS( $OBJS_LIBS(seg_init) )
         //INPUT_SECTIONS( $OBJS_LIBS(seg_pmco) )
      } > mem_block0_bw

  
    // ------------------------------------------------------------------
    // L2 - core memory

      /*$VDSG<insert-new-sections-for-l2>                       */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-for-l2>                       */
      
      #if defined(MY_L2_CACHED_MEM)

      #else
      #warning L2 cached memory unused
      #endif // MY_L2_CACHED_MEM

    // ------------------------------------------------------------------
    // L2 - uncached memory

      // Memory at the very start of L2 is dedicated for MCAPI/ICC support.
      // It is used to define a fixed size structure.
      // The labels defined below are used in runtime support for MCAPI and caches.

      ___MCAPI_common_start = MEMORY_START(mem_L2B1P1_bw);
      ___MCAPI_common_end   = MEMORY_END  (mem_L2B1P1_bw);
      ___MCAPI_arm_start    = 0;
      ___MCAPI_arm_end      = 0;
      ___MCAPI_sharc0_start = MEMORY_START(mem_L2B1P3_bw);
      ___MCAPI_sharc0_end   = MEMORY_END  (mem_L2B1P3_bw);
      ___MCAPI_sharc1_start = MEMORY_START(mem_L2B1P2_bw);
      ___MCAPI_sharc1_end   = MEMORY_END  (mem_L2B1P2_bw);
      ___l2_start           = MEMORY_START(mem_L2B1P1_bw);
      ___l2_end             = MEMORY_END  (mem_L2BC_bw);
      ___l2_uncached_start  = MEMORY_START(mem_L2B1P1_bw);
      ___l2_uncached_end    = MEMORY_END  (mem_L2B1P3_bw);
      ___l2_cached_start    = MEMORY_START(mem_L2B1toB5_bw);
      ___l2_cached_end      = MEMORY_END  (mem_L2BC_bw);

      #if defined(MY_L2_UNCACHED_MEM)
      dxe_l2_uncached_bw DATA_INIT_QUAL BW
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2_uncached seg_uncached) )
      } > MY_L2_UNCACHED_MEM
      
      dxe_l2_uncached DATA_INIT_QUAL DM
      {
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2_uncached seg_uncached) )
      } > MY_L2_UNCACHED_MEM
      
      #else
      #warning L2 uncached memory unused
      #endif // MY_L2_UNCACHED_MEM

	 shared_mem_bw BW
      {
         // L2 data.
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( $OBJS_LIBS(Seg_Shared_Mem) )
      } > Shared_Memory
    // ------------------------------------------------------------------
    // Complete the stack and heap definitions.

      /*$VDSG<before-completing-the-stack-and-heap-definitions>  */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<before-completing-the-stack-and-heap-definitions>  */
      
       dxe_block0_heap NO_INIT BW
      {
         INPUT_SECTION_ALIGN(4)
         ldf_heap_space = system_heap;
         ldf_heap_end = (ldf_heap_space + (system_heap_length  - 8));
         ldf_heap_length = ldf_heap_end - ldf_heap_space;
      } > mem_block0_heap_bw
      
      dxe_block0_stack NO_INIT BW
      {
         INPUT_SECTION_ALIGN(4)
         ldf_stack_space = system_stack;
         ldf_stack_end = (ldf_stack_space + (system_stack_length - 8));
         ldf_stack_length = ldf_stack_end - ldf_stack_space;
      } > mem_block0_stack_bw
      
      dxe_l2_stack_and_heap_expand NO_INIT BW
      {
         INPUT_SECTION_ALIGN(4)
         
         /*$VDSG<insert-input-sections-at-the-start-of-dxe_L2_stack_and_heap>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-dxe_L2_stack_and_heap>  */
         
      } > MY_L2_CACHED_MEM     
      
       // ------------------------------------------------------------------
    // SDRAM

      
      /*$VDSG<insert-new-sections-for-sdram>                    */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-for-sdram>                    */
      

      // The symbols defined below are used in runtime support for MCAPI and
      // caches.
      ___sdram_start        = MEMORY_START(RESERVED_SDRAM_MEM_A1);
      ___sdram_end          = MEMORY_END  (MEM_DMC0_SDRAM_MEM_A7);
      
      dxe_sdram_cpp_ctors_nw DM
      {
         // C++ global constructors list for word-addressed code.
         
         /*$VDSG<insert-input-sections-at-the-start-of-dxe_sdram_cpp_ctors>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-dxe_sdram_cpp_ctors>  */
         
         FORCE_CONTIGUITY
         __ctors = .;    // __ctors points to the start of the section
         INPUT_SECTIONS( $OBJS_LIBS(seg_ctdm) )
         INPUT_SECTIONS( $OBJS_LIBS(seg_ctdml) )
         INPUT_SECTIONS( $OBJS_LIBS(.gdt .gdt32) )
         
         /*$VDSG<insert-input-sections-at-the-end-of-dxe_sdram_cpp_ctors>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-dxe_sdram_cpp_ctors>  */
         
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( $OBJS_LIBS(seg_dmda) )
      } > MEM_CODE_NW_SDRAM_MEM_A2
      
      dxe_sdram_cpp_ctors_bw BW
      {
         // C++ global constructors list for byte-addressed code.
         INPUT_SECTION_ALIGN(4)
         FORCE_CONTIGUITY
         _ctors. = .;    // _ctors. points to the start of the section
         INPUT_SECTIONS( $OBJS_LIBS(seg_ctdm) )
         INPUT_SECTIONS( $OBJS_LIBS(seg_ctdml seg_ctdml_bw) )
      } > MEM_CODE_NW_SDRAM_MEM_A2
      
      LIBC_segment_code SW
      {       
         INPUT_SECTION_ALIGN(2)  
         
         INPUT_SECTIONS( libcc.dlb  (seg_swco) )
         INPUT_SECTIONS( libcc.dlb  (seg_pmco) )
         INPUT_SECTIONS( libc.dlb  (seg_swco) )         
         INPUT_SECTIONS( libc.dlb  (seg_pmco) )
         INPUT_SECTIONS( libio.dlb  (seg_swco) )
         INPUT_SECTIONS( libio.dlb  (seg_pmco) )
         INPUT_SECTIONS( libosal_noos.dlb  (seg_swco) )
         INPUT_SECTIONS( libosal_noos.dlb  (seg_pmco) )
         INPUT_SECTIONS( libssl.dlb  (seg_swco) )
         INPUT_SECTIONS( libssl.dlb  (seg_pmco) )
         INPUT_SECTIONS( libdrv.dlb  (seg_swco) )
         INPUT_SECTIONS( libdrv.dlb  (seg_pmco) )          
         INPUT_SECTIONS( libdsp.dlb  (seg_swco) )
         INPUT_SECTIONS( libdsp.dlb  (seg_pmco) )     
      } > MY_SDRAM_COMMON_LIB_C_CODE_MEM       
      
      
      LIBC_segment_data BW
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( libc.dlb  (seg_dmda) )
         INPUT_SECTIONS( libc.dlb  (seg_ctdml_bw) )
         INPUT_SECTIONS( libio.dlb  (seg_dmda) )
         INPUT_SECTIONS( libosal_noos.dlb  (seg_dmda) )
         INPUT_SECTIONS( libssl.dlb  (seg_dmda) )
         INPUT_SECTIONS( libdrv.dlb  (seg_dmda) )       
      } > MY_SDRAM_COMMON_LIB_C_DATA_MEM
      
      LIBC_segment_data_dm DM
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( libc.dlb  (seg_dmda) )
         INPUT_SECTIONS( libc.dlb  (seg_ctdml) )
         INPUT_SECTIONS( libio.dlb  (seg_dmda) )
         INPUT_SECTIONS( libosal_noos.dlb  (seg_dmda) )
         INPUT_SECTIONS( libssl.dlb  (seg_dmda) )
         INPUT_SECTIONS( libdrv.dlb  (seg_dmda) )         		 
      } > MY_SDRAM_COMMON_LIB_C_DATA_MEM
   
#ifdef ADI_VIRTUAL      
      VirtualX_segment_code SW 
      {       
         INPUT_SECTION_ALIGN(2)  
         INPUT_SECTIONS( $OBJS_LIBS( seg_patchWavesurround) )
         INPUT_SECTIONS( $OBJS_LIBS( seg_wavsurr) )
         INPUT_SECTIONS( $OBJS_LIBS( Seg_ADIVirtualX_Code) )                       
      } > ADIVIRTUALX_CODE_SDRAM_MEM
      
      kernal_code_Virualx_dm_l3 DM
      {
         INPUT_SECTION_ALIGN(4)
		 INPUT_SECTIONS( $OBJS_LIBS(seg_dmhe_ADI))
		  
      } > ADIVIRTUALX_DATA_SDRAM_MEM
      
      kernal_code_Virualx_pm_l3 PM 32
      {
         INPUT_SECTION_ALIGN(4)
		 INPUT_SECTIONS( $OBJS_LIBS(ws_pm_data))  
      } > ADIVIRTUALX_DATA_SDRAM_MEM
                
       kernal_code_Virualx_bw_l3 BW
      {
         INPUT_SECTION_ALIGN(4)
		 INPUT_SECTIONS( $OBJS_LIBS(seg_VirtualX_LibData))
		 INPUT_SECTIONS( $OBJS_LIBS(seg_Input_buffer))
		 INPUT_SECTIONS( $OBJS_LIBS(seg_Output_buffer))
		 INPUT_SECTIONS( $OBJS_LIBS(seg_ADIVirtual_Variables))
      } > ADIVIRTUALX_DATA_SDRAM_MEM
#endif      
      
      CUSTPP_CODE_A4_C2 SW
      {
         // VISA code.
         INPUT_SECTION_ALIGN(2)
         FILL(0x1)  // fill gaps in memory with NOPs
         INPUT_SECTIONS( $OBJS_LIBS(Seg_CustomerPP_Code) )
      } > MY_SDRAM_CUSTPP_CODE_MEM
      
      KERNEL_CODE_L3_SW SW
      {
        INPUT_SECTION_ALIGN(2)
        INPUT_SECTIONS( $OBJS_LIBS(Seg_KERNAL_Code_L3 ) )   
        INPUT_SECTIONS( services/pdma/adi_pdma_2156x.doj (seg_swco) )
        INPUT_SECTIONS( system/mcapi/GeneratedSources/mcapi_config.doj(seg_swco))    
      } > MY_SDRAM_KERNEL_CODE_MEM
      
      KERNEL_DATA_L3_DM DM
      {
         INPUT_SECTION_ALIGN(4)
		 INPUT_SECTIONS( $OBJS_LIBS(Seg_KERNAL_Data_L3) )
		 INPUT_SECTIONS( $OBJS_LIBS(seg_word_addr))
      } > MY_SDRAM_KERNEL_DATA_MEM 
      
      KERNEL_DATA_L3_bw BW
      {
         INPUT_SECTION_ALIGN(4)
		 INPUT_SECTIONS( $OBJS_LIBS(Seg_KERNAL_Data_L3) )
		 INPUT_SECTIONS( services/pdma/adi_pdma_2156x.doj (seg_dmda) )
		 INPUT_SECTIONS( system/mcapi/GeneratedSources/mcapi_config.doj(seg_dmda))  
      } > MY_SDRAM_KERNEL_DATA_MEM 
      
      CUST_PP_DATA_L3_bw BW
      {
         INPUT_SECTION_ALIGN(4)
		 INPUT_SECTIONS( $OBJS_LIBS(Seg_CustomerPP_Data) )
		 INPUT_SECTIONS( Customer_PP/Customer_PP.doj (seg_dmda) )
      } >MY_SDRAM_CUSTPP_DATA_MEM
       
        
   } /* SECTIONS */
   

} /* 21593_CORE_2 */

